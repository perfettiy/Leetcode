/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 import java.util.ArrayList;
 import java.util.Collections;
public class Solution {
    public ArrayList<ArrayList<Integer>> levelOrderBottom(TreeNode root) {
        ArrayList<ArrayList<Integer>> lists = new ArrayList<ArrayList<Integer>>();
        ArrayList<Integer> list = new ArrayList<Integer>();
        if(root==null) return lists;
       // list.add(root.val);
       // lists.add(new ArrayList<Integer>(list));
        
        Queue<TreeNode> queue= new LinkedList<TreeNode>();
        queue.add(root);
        while(!queue.isEmpty()){
            ArrayList<Integer> newList= new ArrayList<Integer>();
            Queue<TreeNode> newQueue= new LinkedList<TreeNode>();
            while(!queue.isEmpty()){
                TreeNode t=queue.poll();
                    newList.add(t.val);
                    if(t.left!=null)
                        newQueue.add(t.left);
                    if(t.right!=null)
                        newQueue.add(t.right);
            }
            queue.addAll(newQueue);
            lists.add(new ArrayList<Integer>(newList));
        }
             Collections.reverse(lists);
             return lists;}
}
