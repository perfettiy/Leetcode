/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ArrayList<ArrayList<Integer>> zigzagLevelOrder(TreeNode root) {
        Stack<TreeNode> currentLevel = new Stack<TreeNode>();
        ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
        boolean leftToRight=false;
        if(root==null) return result;
        currentLevel.push(root);
        while(!currentLevel.isEmpty())
        {
            ArrayList<Integer> list= new ArrayList<Integer>();
            Stack<TreeNode> nextLevel=new Stack<TreeNode>();
            while(!currentLevel.isEmpty())
            {
              TreeNode t=currentLevel.pop();
              list.add(t.val);
              if(leftToRight)
              {
                  if(t.right!=null) nextLevel.push(t.right);
                  if(t.left!=null)  nextLevel.push(t.left);
              }
              else
              {
                  if(t.left!=null) nextLevel.push(t.left);
                  if(t.right!=null) nextLevel.push(t.right);
              }
            }
                result.add(new ArrayList<Integer>(list));
                leftToRight=!leftToRight;
                currentLevel=nextLevel;
        }
      return result; 
      }
}
