class DLinkedListNode{
    public int key;
    public int val;
    public DLinkedListNode pre;
    public DLinkedListNode next;
    public DLinkedListNode(int k, int v){
        key=k;
        val=v;
    }
}

public class LRUCache {
    private int len;
    private int capacity;
    private HashMap<Integer, DLinkedListNode> map = new HashMap<Integer, DLinkedListNode>();
    private DLinkedListNode head;
	private DLinkedListNode end;
	
    public  void removeNode(DLinkedListNode cur){
        DLinkedListNode prev=cur.pre;
        DLinkedListNode post=cur.next;
        if(prev!=null){
            prev.next=post;
        }else{
            head=post;
        }
        
        if(post!=null){
            post.pre=prev;
        }else{
            end=prev;
        }
    }
    
    public  void setHead(DLinkedListNode cur){
        cur.next=head;
        cur.pre=null;
        if(head!=null){
            head.pre=cur;
        }
        head=cur;
        if(end==null){
            end=cur;
        }
    }
    
    
    public  LRUCache(int capacity) {
        this.capacity=capacity;
        len=0;
    }
    
    public  int get(int key) {
        if(map.containsKey(key)){
            DLinkedListNode t=map.get(key);
            removeNode(t);
            setHead(t);
           
            return t.val;
        }else{
        
            return -1;
        }
    }
    
    public  void set(int key, int value) {
        if(map.containsKey(key)){
            DLinkedListNode oldNode=map.get(key);
            oldNode.val=value;
            removeNode(oldNode);
            setHead(oldNode);
        }else{
            DLinkedListNode newNode = new DLinkedListNode(key, value);

            if(len>=capacity){
                 map.remove(end.key);  
                
                 end=end.pre;
               
                 if(end!=null){
                     end.next=null;
                 }
                 map.put(key, newNode);
                 
                 setHead(newNode);
            }else{
                 map.put(key, newNode);
                 setHead(newNode);
                 len++;
                 
                }
            }
    }
}
