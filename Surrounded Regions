public class Solution {
    public void solve(char[][] board) {
        if(board==null||board.length==0||board[0].length==0) return;
        int m=board.length;
        int n=board[0].length;
        for(int i=0;i<m;i++){
            fill(board, i, 0);
            fill(board, i,n-1);
        }
        for(int j=0;j<n;j++){
            fill(board, 0, j);
            fill(board, m-1,j);
        }
        
        for(int i=0;i<m;i++)
            for(int j=0;j<n;j++){
                if(board[i][j]=='O')
                    board[i][j]='X';
                if(board[i][j]=='#')
                    board[i][j]='O';
            }
    }
    
    public void fill(char[][] board, int i, int j){
        int m=board.length; 
        int n=board[0].length;
        if(board[i][j]!='O')
            return;
        board[i][j]='#';
        Queue<Integer> queue= new LinkedList<Integer>();
        queue.add(i*n+j);
        while(!queue.isEmpty()){
            int t=queue.poll();
            int row=t/n;
            int col=t%n;
            if(row>0&&board[row-1][col]=='O'){
                board[row-1][col]='#';
                queue.add((row-1)*n+col);
            }
            if(row<m-1&&board[row+1][col]=='O'){
                board[row+1][col]='#';
                queue.add((row+1)*n+col);
            }
            if(col>0&&board[row][col-1]=='O'){
                board[row][col-1]='#';
                queue.add((row)*n+col-1);
            }
            if(col<n-1&&board[row][col+1]=='O'){
                board[row][col+1]='#';
                queue.add((row)*n+col+1);
            }
        }
    }
}

